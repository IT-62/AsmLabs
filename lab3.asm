PUTCHAR	MACRO CHAR
	MOV	AL, CHAR
	INT	29H
ENDM

PUTSTR MACRO STR
	MOV	AH, 09H
	LEA	DX, STR
	INT	21H
ENDM

PUTENDL MACRO
	PUTCHAR	0DH
	PUTCHAR	0AH
ENDM

GETCHAR MACRO
	MOV	AH, 08H
	INT	21H
ENDM

GETSTR MACRO BUFF
	LEA	DX, BUFF
	MOV	AH, 0AH
	INT	21H
	PUTENDL
ENDM

STSEG SEGMENT PARA STACK "STACK"
	DB 64 DUP ("STACK")
STSEG ENDS

DSEG SEGMENT PARA PUBLIC "DATA"
	INPUT_MSG DB "Enter number:$"
	ERR_INV_MSG DB "Number is invalid.$"
	ERR_OF_MSG DB "Number is too big.$"
	BUFF DB 7, ?, 7 DUP ('?')
	NUM DW 23
	REST DW 0
	TMP DW 0
	ACC DB 5
	IS_NEG DB 0H
	IS_ERR DB 0H
DSEG ENDS

CSEG SEGMENT PARA PUBLIC "CODE"
	ASSUME CS: CSEG, DS: DSEG, SS: STSEG

	ATOI PROC NEAR
		LEA 	DI, BUFF + 2
		MOV 	CL, [DI]
		CMP 	CL, '-'
		JE 	ATOI_NEG
		CMP 	CL, '+'
		JE 	ATOI_POS
		
		ATOI_INIT:
		XOR 	BX, BX
		MOV	BX, 10
		XOR	AX, AX

	ATOI_LOOP:
		XOR 	CX, CX
		MOV	CL, [DI]
		CMP	CL, 0DH
		JE 	ATOI_END
		CMP	CL, 30H
		JB	ATOI_ERR_INV
		CMP	CL, 39H
		JA	ATOI_ERR_INV
		SUB	CL, 30H
		MUL	BX
		JC	ATOI_ERR_OF
		ADD	AX, CX
		JC 	ATOI_ERR_OF
		INC	DI
		JMP	ATOI_LOOP

	ATOI_NEG:
		PUSH 	AX
		MOV	AL, 1
		MOV	IS_NEG, AL
		POP	AX
		INC 	DI
		JMP	ATOI_INIT

	ATOI_POS:
		PUSH 	AX
		MOV	AL, 0
		MOV	IS_NEG, AL
		POP	AX
		INC	DI
		JMP	ATOI_INIT

	ATOI_ERR_INV:
		MOV	AL, 1
		MOV	IS_ERR, AL
		PUTSTR 	ERR_INV_MSG
		PUTENDL
		JMP	ATOI_QUIT

	ATOI_ERR_OF:
		MOV	AL, 1
		MOV	IS_ERR, AL
		PUTSTR 	ERR_OF_MSG
		PUTENDL
		JMP	ATOI_QUIT

	ATOI_END:
		CMP	AX, 32768
		JA	ATOI_ERR_OF
		MOV	CL, IS_NEG
		CMP	CL, 1
		JNZ	ATOI_QUIT
		NEG	AX

	ATOI_QUIT:
		MOV	NUM, AX
		RET	
	ATOI ENDP

	ITOA PROC NEAR
		PUSH	AX
		PUSH	BX
		PUSH	CX
		PUSH	DX
		MOV 	BX, NUM
		OR	BX, BX
		JNS	ITOA_POS
		PUTCHAR '-'
		NEG	BX
	ITOA_POS:
		MOV	AX, BX
		XOR	CX, CX
		MOV	BX, 10
	ITOA_PARSE_LOOP:
		XOR	DX, DX
		DIV	BX
		ADD	DL, '0'
		PUSH	DX
		INC	CX
		TEST	AX, AX
		JNZ 	ITOA_PARSE_LOOP
	ITOA_END_LOOP:
		POP 	AX
		INT 	29H
		LOOP 	ITOA_END_LOOP
		POP	DX
		POP	CX
		POP	BX
		POP	AX
		RET
	ITOA ENDP

	SYS_SOLVE PROC NEAR
		PUSH	AX
		PUSH	BX
		PUSH	CX
		PUSH	DX
		MOV 	BL, IS_NEG
		CMP 	BL, 1
		JZ	THIRD_COND
		CMP	AX, 0
		JE	THIRD_COND
		CMP	AX, 5
		JBE	SECOND_COND
	FIRST_COND:
		MUL 	AX
		JO	SOLVE_ERR
		XOR	BX, BX
		MOV	BL, 35
		MUL	BX
		JO	SOLVE_ERR
		SUB	AX, 15
		CMP	DX, 0
		JE	SOLVE_CONTINUE
		MOV	NUM, DX
		CALL	ITOA
	SOLVE_CONTINUE:
		MOV	NUM, AX
		CALL	ITOA
		JMP	SOLVE_END
	SECOND_COND:
		MOV	BX, AX
		MOV	AL, 10
		XOR	AH, AH
		XOR	DX, DX
		DIV	BX
		MOV	NUM, AX
		MOV	REST, DX
		CALL	FP_OUT
		JMP	SOLVE_END
	THIRD_COND:
		MOV	DX, AX
		MOV	AX, 215
		SUB	AX, DX
		JO	SOLVE_ERR
		MOV	NUM, AX
		CALL	ITOA
		JMP	SOLVE_END
	SOLVE_ERR:
		PUTSTR	ERR_OF_MSG
	SOLVE_END:
		POP	DX
		POP	CX
		POP	BX
		POP	AX
		RET
	SYS_SOLVE ENDP

	FP_OUT PROC NEAR
		CALL 	ITOA
		CMP	REST, 0
		JE	FP_END
		PUTCHAR	2EH
		MOV	CL, ACC
		MOV	TMP, BX
		MOV	AX, REST
		XOR 	BX, BX
		MOV	BX, 10
	FP_LOOP:
		XOR 	DX, DX
		MUL	BX
		DIV	TMP
		MOV	NUM, AX
		MOV	AX, DX
		CALL	ITOA
		LOOP	FP_LOOP
	FP_END:
		RET
	FP_OUT ENDP

	MAIN PROC FAR
		PUSH	DS
		XOR 	AX, AX
		PUSH 	AX
		MOV 	AX, DSEG
		MOV	DS, AX

		PUTSTR 	INPUT_MSG
		PUTENDL
		
		GETSTR 	BUFF

		CALL 	ATOI
		CMP	IS_ERR, 1
		JE	MAIN_END
		CALL	SYS_SOLVE
		
		MAIN_END:
		GETCHAR
		RET
	MAIN ENDP
CSEG ENDS

END MAIN